(in-package :challenge-six)

(defun dir-to-pname (dn)
  (let ((len (length dn)))
    (if (and (> len 0)
	     (not (eql (char dn (- len 1)) #\/)))
	(pathname (<++ dn "/"))
	(pathname dn))))

(defvar *demo-app*)

(defun start-site (root-dir port)
  (let* ((real-root-dir (dir-to-pname root-dir))
	 (log-dir (ensure-directories-exist (merge-pathnames (dir-to-pname "var/log") real-root-dir)))
	 (data-dir (ensure-directories-exist (merge-pathnames (dir-to-pname "var/lib") real-root-dir)))
	 (msg-log-pname (make-pathname :name "msg" :type "log" :defaults log-dir))
	 (access-log-pname (make-pathname :name "access" :type "log" :defaults log-dir))
	 (db-pname (make-pathname :name "demo" :type "db" :defaults data-dir)))
    (setf *message-log-pathname* msg-log-pname)
    (setf *access-log-pathname* access-log-pname)
    (setf *demo-db-path* (namestring db-pname))
    (format t "Message log is ~S" *message-log-pathname*)
    (init-demo-db)
    (with-demo-db
      (drop-test-tables)
      (create-test-tables)
      (insert-test-data))
    (setf *demo-app* (make-instance 'easy-acceptor
				    :port port
				    :access-log-destination access-log-pname
				    :message-log-destination msg-log-pname))
    (start *demo-app*)))

#.(locally-enable-sql-reader-syntax)

(defun init-demo-db ()
  (initialize-database-type :database-type :sqlite3)
  (create-database (list *demo-db-path*) :database-type :sqlite3))

(defmacro create-or-use-table (table &rest args)
  `(when (not (table-exists-p ,table)) (create-table ,table ,@args)))

(defun create-test-tables ()
  (create-or-use-table "Users" 
		       '(("UserID" integer :not-null :unique :primary-key)
			 ("UserName" string)
			 ("Password" string)))
  (create-or-use-table "Reports" 
		       '(("ReportID" integer :not-null :unique :primary-key)
			 ("ReportTitle" string)
			 ("RptSequence" real)
			 ("SelectClause" string)
			 ("FromClause" string)
			 ("WhereClause" string)
			 ("GroupByClause" string)
			 ("OrderByClause" string)))
  (create-or-use-table "ReportCriteria"
		       '(("ItemID" integer :not-null :unique :primary-key)
			 ("ReportRef" integer)
			 ("FldName" string)
			 ("FldTitle" string)
			 ("FmtType" string)
			 ("Width" integer)
			 ("DefaultVal" string)
			 ("Sequence" integer)
			 ("KeepWithPrior" integer)
			 ("Required" integer)
			 ("Comparer" string)
			 ("TheList" string)
			 ("FmtCodes" string)))
  (create-or-use-table "UserFields"
		       '(("UserID" integer)
			 ("RptItemID" integer)
			 ("FldValue" string)))
  (create-or-use-table "Contacts" 
		       '(("ContactID" integer :not-null :unique :primary-key)
			 ("FirstMI" string)
			 ("LastName" string)
			 ("Address1" string)
			 ("Address2" string)
			 ("City" string)
			 ("State_Province" string)
			 ("ZipCode" string)
			 ("Country" string)
			 ("Phone" string)
			 ("Company" string)
			 ("Dept" string)
			 ("OtherContact" string)))
  (create-or-use-table "Items" 
		       '(("ItemID" integer :not-null :unique :primary-key)
			 ("Descr" string)
			 ("ListPrice" integer)
			 ("SupplierRef" integer)
			 ("Alias" string)
			 ("InStock" integer)))
  (create-or-use-table "OrderDetail" 
		       '(("OrderDetailID" integer :not-null :unique :primary-key)
			 ("OrderRef" integer)
			 ("ItemRef" integer)
			 ("Qty" real)
			 ("Note" string)))
  (create-or-use-table "Orders" 
		       '(("OrderID" integer :not-null :unique :primary-key)
			 ("OrderDate" real)
			 ("ClientRef" integer)
			 ("ShipToRef" integer)
			 ("IsShipped" integer))))

(defun insert-test-data ()
  (with-transaction ()
    (insert-rows "Users" '("UserID" "UserName" "Password") `((1 "test" ,(hash-password "11111111"))))
    (insert-rows "Reports"
	       '("ReportID" "ReportTitle" "RptSequence" "SelectClause" "FromClause" "WhereClause" "GroupByClause" "OrderByClause")
	       '((1 "Customers" 2.00 "*" "contacts" "contactID in (select clientRef from orders)" nil "lastname,company")
		 (2 "Catalog" 1.00 "*" "items" nil nil "descr")
		 (3 "Test Report" 3.00 "*" "TestData" nil nil "testid")
		 (4 "Ordered Items" 4.00 "FirstMI, LastName, OrderID, Descr as Description, Qty, ListPrice" "Contacts, Orders, OrderDetail, Items" "Orders.ClientRef = Contacts.ContactID AND OrderDetail.OrderRef = Orders.OrderID AND Orders.ClientRef = Contacts.ContactID AND OrderDetail.OrderRef = Orders.OrderID AND OrderDetail.ItemRef = Items.ItemID" nil "OrderID, Descr")
		 (5 "Order Totals" 5.00 "OrderRef  as [Order ID], SUM(Listprice) as Total" "OrderDetail INNER JOIN Items ON OrderDetail.ItemRef = Items.ItemID" nil "OrderRef" "OrderRef")))
    (insert-rows "ReportCriteria"
	       '("ItemID" "ReportRef" "FldName" "FldTitle" "FmtType" "Width" "DefaultVal" "Sequence" "KeepWithPrior" "Required" "Comparer" "TheList" "FmtCodes")
	       '((1 1 "FirstMI" "First Name" "t" 25 nil 1.00 0 0 nil nil nil)
		 (2 1 "LastName" "Last Name" "t" 25 nil 2.00 0 0 nil nil nil)
		 (3 1 "Company" "Company" "t" 25 nil 3.00 0 0 nil nil nil)
		 (4 1 "Zipcode" "From Zip Code" "t" 5 "00000" 4.00 0 0 ">=" nil nil)
		 (5 1 "Zipcode" "To" "t" 5 "99999" 5.00 1 0 "<=" nil nil)
		 (6 2 "ItemID" "Item ID" "n" nil nil 1.00 0 0 nil nil nil)
		 (7 2 "Descr" "Description" "t" 50 nil 2.00 0 0 nil nil nil)
		 (8 2 "ListPrice" "Lowest Price" "n" 14 nil 3.00 0 0 ">=" nil nil)
		 (9 2 "ListPrice" "Highest Price" "n" 16 nil 4.00 1 0 "<=" nil nil)
		 (10 2 "Alias" "Alias" "t" nil nil 5.00 0 0 nil nil nil)
		 (11 2 "InStock" "In Stock" "y" 0 nil 6.00 0 0 nil nil nil)
		 (12 3 "TestID" "Test ID" "N" 0 nil 1.00 0 0 nil nil nil)
		 (13 3 "TestText" "Test Text" "T" 0 nil 2.00 0 0 nil nil nil)
		 (14 3 "TestNum" "Test Number" "N" 0 nil 3.00 0 0 nil nil nil)
		 (15 3 "TestDate" "Test Date From" "D" 0 nil 4.00 0 0 ">=" nil nil)
		 (16 3 "TestBool" "Test Boolean" "Y" 0 nil 5.00 0 0 nil nil nil)
		 (17 3 "TestList" "Test List" "L" 0 nil 6.00 0 0 nil "AAA, BBB, CCC, DDD" nil)
		 (18 4 "FirstMI" "First Name" "t" 0 nil 1.00 0 0 nil nil nil)
		 (19 4 "LastName" "Last Name" "t" 0 nil 2.00 0 0 nil nil nil)
		 (20 4 "OrderID" "Order ID" "n" 0 nil 3.00 0 0 nil nil nil)
		 (21 4 "Descr" "Description" "t" 0 nil 4.00 0 0 nil nil nil)
		 (22 4 "Qty" "Qty. From" "n" 7 nil 5.00 0 0 ">=" nil nil)
		 (23 4 "Qty" "To" "n" 8 nil 6.00 1 0 "<=" nil nil)
		 (24 4 "ListPrice" "Price From" "n" 10 nil 7.00 0 0 ">=" nil nil)
		 (25 4 "ListPrice" "To" "n" 12 nil 8.00 1 0 "<=" nil nil)
		 (26 5 "OrderRef" "OrderID" "n" 0 nil 1.00 0 0 nil nil nil)
		 (29 3 "TestDate" "To" "D" 0 nil 4.50 1 0 "<=" nil nil)
		 (30 2 "SupplierRef" "Supplier ID" "t" 0 nil 4.50 0 0 nil nil nil)))
    (insert-rows "UserFields" '("UserID" "RptItemID" "FldValue")
	       '((1 10 "")
		 (1 11 "(either)")
		 (1 12 "")
		 (1 13 "")
		 (1 14 "")
		 (1 15 "4/1/1996")
		 (1 16 "(either)")
		 (1 17 "(any)")
		 (1 1 "")
		 (1 2 "z")
		 (1 3 "")
		 (1 4 "00000")
		 (1 5 "99999")
		 (1 18 "")
		 (1 19 "")
		 (1 20 "")
		 (1 21 "")
		 (1 22 "")
		 (1 23 "")
		 (1 24 "")
		 (1 25 "")
		 (1 26 "6")
		 (1 27 "30")
		 (1 28 "80")
		 (1 6 "")
		 (1 7 "an")
		 (1 8 "")
		 (1 9 "100")
		 (1 29 "")
		 (1 30 "")))
    (insert-rows "Contacts" '("ContactID" "FirstMI" "LastName" "Address1" "Address2" "City" "State_Province" "ZipCode" "Country" "Phone" "Company" "Dept" "OtherContact")
	       '((1 "Fred J." "Smith" "123 Oak Street." nil "Penville" "NC" "28642" nil "456-123-4567" nil nil nil)
		 (2 "Sharon" "Rogers" "473 Yiz lane" "Suite 204" "Las Vegas" "NV" "89131" nil "424-235-1244 X24" "Zynter Products" "Sales" nil)
		 (3 "Tedd" "Marginson" "12 Foo Dr." nil "Bartown" "CA" "91847" nil nil "Yizzer Products" nil "foo@bar.com")
		 (4 "Han" "Tarsa" nil nil "Tampa" "FL" "33618" nil "443-142-1121" "Cannit  Inc." nil nil)
		 (5 "Lisa M." "Candor" "4425 Lake Dr." nil "Pleasonton" "CO" "80235" nil nil nil nil nil)
		 (6 "Fifi" nil nil nil "Orangevale" "CA" "95662" nil "343-224-4324" "Yazz  Inc." "Sales" "fifi@yazz.biz")
		 (7 "Bendle" "Carmon" "8188 Hog St." nil "Bloomington" "TX" "77098" nil nil "Jay's Services" nil nil)
		 (8 "Bud W." "Gulperson" "1730 Harp Road" nil "Hagglesville" "OK" "63632" nil nil nil nil nil)
		 (9 "Samuel" "Harris" "3242 Ada Drive" nil "Mappington" "OR" "97233" nil nil nil nil nil)
		 (10 "Panthon L." "Zamphire" "23 K St." nil "Cleveland" "OH" "44126" nil nil nil nil nil)
		 (11 "Bertha" "Han" "4213 17th. St." nil "Parkton" "IL" "60101" nil nil nil nil nil)
		 (12 "Lin" "Pender" "1804 45th St." nil "Salt Lake City" "UT" "84118" nil nil nil nil nil)
		 (13 "Gill" "Bates" "One Sicromoft Way" "Suite 665" "Seattle" "WA" "98198" nil nil nil nil nil)
		 (14 "Haspa W." "Torminony" "646 South Main St." nil "New York" "NY" "11427" nil nil nil nil nil)
		 (15 "Mike R." "Rabo" "44 N. Lincoln Ave." nil "Tampa" "FL" "33619" nil nil nil nil nil)
		 (16 "Harvey" "Slaton" "437 Elm St." nil "Boston" "MA" "02120" nil nil nil nil nil)))
    (insert-rows "Items" '("ItemID" "Descr" "ListPrice" "SupplierRef" "Alias" "InStock")
	       '((1 "Heart Wallpaper  50ft." 1000 2 nil 0)
		 (2 "Zantex Floor Clean" 650 3 nil 1)
		 (3 "Horka Modem" 4995 4 "YH-2004" 1)
		 (4 "Printer Paper (50 sheets)" 600 2 nil 0)
		 (5 "Thin String" 500 4 nil 1)
		 (6 "Fat String" 800 6 "7473262" 0)
		 (7 "Plastic Office Plant" 2680 4 nil 1)
		 (8 "Air Filter  fits size C" 1800 6 nil 1)
		 (9 "Correction Fluid" 499 3 "PV33-01" 0)
		 (10 "10-Inch Fan" 1900 2 nil 1)
		 (11 "Heavy-duty Sun Block" 795 6 nil 0)
		 (12 "5mm Bolt" 50 2 "KS3928" 1)
		 (13 "Daisy Hat" 2000 3 nil 1)
		 (14 "Fancy Pen/Pencil Set" 1675 6 "ST-045" 0)
		 (15 "Lint Brush" 900 2 nil 1)
		 (16 "Janitorial Service - 1 month" 20000 7 nil 1)))
    (insert-rows "OrderDetail" '("OrderDetailID" "OrderRef" "ItemRef" "Qty" "Note")
	       '((1 1 16 1.00 nil)
		 (2 5 15 1.00 nil)
		 (3 1 14 1.00 nil)
		 (4 5 13 3.00 nil)
		 (5 1 12 1.00 nil)
		 (6 2 11 1.00 nil)
		 (7 2 10 1.00 nil)
		 (8 2 9 10.00 "Could not read fax clear. Please check this.")
		 (9 3 8 1.00 nil)
		 (10 3 7 1.00 nil)
		 (11 4 6 4.00 nil)
		 (12 5 2 1.00 nil)
		 (13 5 1 1.00 nil)
		 (14 6 2 1.00 nil)
		 (15 6 12 1.00 nil)
		 (16 6 13 1.00 nil)
		 (17 6 14 1.00 nil)
		 (18 7 15 2.00 "3 note included, only 2 in stock.")
		 (19 7 16 1.00 nil)
		 (20 7 1 1.00 nil)
		 (21 7 2 1.00 nil)
		 (22 7 3 3.00 nil)
		 (23 7 4 1.00 nil)
		 (24 7 5 1.00 nil)
		 (25 7 6 50.00 nil)
		 (26 8 7 1.00 nil)
		 (27 8 8 1.00 nil)
		 (28 8 9 1.00 nil)
		 (29 8 10 4.00 nil)
		 (30 9 11 1.00 nil)
		 (31 9 12 1.00 nil)
		 (32 9 13 1.00 nil)
		 (33 9 14 5.00 nil)
		 (34 9 15 1.00 nil)
		 (35 9 16 1.00 nil)
		 (36 9 1 10.00 nil)))
    (insert-rows "Orders" '("OrderID" "OrderDate" "ClientRef" "ShipToRef" "IsShipped")
	       `((1 ,[function "datetime" "2001-01-02 00:00:00"] 1 1 1)
		 (2 ,[function "datetime" "2001-02-19 00:00:00"] 14 14 1)
		 (3 ,[function "datetime" "2001-05-13 00:00:00"] 8 8 1)
		 (4 ,[function "datetime" "2001-06-01 00:00:00"] 1 1 0)
		 (5 ,[function "datetime" "2001-06-01 00:00:00"] 14 14 0)
		 (6 ,[function "datetime" "2001-06-02 00:00:00"] 8 8 0)
		 (7 ,[function "datetime" "2001-06-03 00:00:00"] 9 9 0)
		 (8 ,[function "datetime" "2001-06-04 00:00:00"] 10 1 0)
		 (9 ,[function "datetime" "2001-06-04 00:00:00"] 13 13 0)))))

(defun drop-test-tables ()
  (dolist (tab '("Users" "Reports" "ReportCriteria" "UserFields" "Contacts" "Items" "OrderDetail" "Orders"))
    (when (table-exists-p tab) (drop-table tab))))

#.(restore-sql-reader-syntax-state)
